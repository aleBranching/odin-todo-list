(()=>{"use strict";function e(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function t(e){return t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},t(e)}function r(r){e(1,arguments);var n=Object.prototype.toString.call(r);return r instanceof Date||"object"===t(r)&&"[object Date]"===n?new Date(r.getTime()):"number"==typeof r||"[object Number]"===n?new Date(r):("string"!=typeof r&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function n(t){e(1,arguments);var n=r(t);return n.setHours(0,0,0,0),n}function o(t,r){e(2,arguments);var o=n(t),a=n(r);return o.getTime()===a.getTime()}function a(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}var s={};function c(){return s}function i(t,n){var o,s,i,d,l,u,m,k;e(1,arguments);var p=c(),h=a(null!==(o=null!==(s=null!==(i=null!==(d=null==n?void 0:n.weekStartsOn)&&void 0!==d?d:null==n||null===(l=n.locale)||void 0===l||null===(u=l.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==i?i:p.weekStartsOn)&&void 0!==s?s:null===(m=p.locale)||void 0===m||null===(k=m.options)||void 0===k?void 0:k.weekStartsOn)&&void 0!==o?o:0);if(!(h>=0&&h<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var f=r(t),g=f.getDay(),v=(g<h?7:0)+g-h;return f.setDate(f.getDate()-v),f.setHours(0,0,0,0),f}function d(t,r,n){e(2,arguments);var o=i(t,n),a=i(r,n);return o.getTime()===a.getTime()}class l{static loadAddProject(){function e(e,t){const r=document.createElement("button"),n=document.createElement("span");n.classList="material-symbols-outlined",n.textContent=e;const o=document.createTextNode(t);return r.appendChild(n),r.appendChild(o),r.id=`form${t}`,r.addEventListener("click",(e=>{e.preventDefault()})),r}const t=document.createElement("form");t.id="addProjectForm";const r=document.createElement("label");r.setAttribute("for","projectName"),r.innerText="Name:";const n=document.createElement("input");n.setAttribute("type","text"),n.setAttribute("name","projectName"),n.setAttribute("id","projectName"),n.required=!0,console.log(n);const o=document.createElement("div");return o.classList="buttons",o.appendChild(e("done","Submit")),o.appendChild(e("cancel","Cancel")),t.appendChild(r),t.appendChild(n),t.appendChild(o),t}static returnProjectItem(e){const t=document.createElement("div");return t.textContent=e,t.id="projectItem",t}static returnAddProjectBTN(){const e=document.createElement("div");return e.textContent="+ Add project",e.id="projectAdder",e}}class u{constructor(e){this.name=e,this.tasks=[]}setName(e){this.name=e}getName(){return this.name}getTasks(){return this.tasks}getTask(e){return this.tasks.find((t=>t.getName()===e))}removeTask(e){return this.tasks=this.tasks.filter((t=>t.getName()!==e)),this.tasks}addTask(e){return this.tasks.push(e)}}class m{constructor(e,t,r){this.name=e,this.date=t,this.done=!1,this.project=r}setDate(e){this.date=e}toggleDone(){this.done=!this.done}getDate(){return this.date}setName(e){this.name=e}getName(){return this.name}}const k=new class{constructor(){this.projects=[],this.projects.push(new u("main"))}getProjects(){return this.projects}getProjectsNotMain(){return this.projects.filter((e=>"main"!==e.getName()))}getAProject(e){return this.projects.find((t=>t.getName()===e))}addProject(e){return this.projects.push(new u(`${e}`))}};k.addProject("test"),k.getAProject("test").addTask(new m("Do homework","2023-01-19","test")),k.getAProject("test").addTask(new m("todays task 1","2023-01-08","test")),k.getAProject("test").addTask(new m("todays task 2","2023-01-08","test")),k.getAProject("main").addTask(new m("get rizz","2023-01-19","main")),k.getAProject("main").addTask(new m("Go rock climbing","2024-02-21","main")),k.getAProject("main").addTask(new m("read a book","2023-01-12","main"));const p=k;class h{static createTask(e,t,r){const n=document.createElement("div");n.classList="task",n.dataset.project=r;const o=document.createElement("div");o.classList="taskInfo";const a=document.createElement("input");a.setAttribute("type","checkbox"),a.setAttribute("name","finishedTask"),a.setAttribute("id","finishedTask");const s=document.createElement("input");s.setAttribute("type","date"),s.value=e,s.readOnly=!0;const c=document.createElement("div");c.classList="noteText",c.textContent=t,o.appendChild(a),o.appendChild(s),o.appendChild(c),n.appendChild(o);const i=document.createElement("div");i.classList="functions";const d=document.createElement("span");d.classList="material-symbols-outlined edit",d.textContent="edit";const l=document.createElement("span");return l.textContent="delete",l.classList="material-symbols-outlined delete",i.appendChild(d),i.appendChild(l),n.appendChild(i),n}static createAddTask(){const e=document.createElement("div");return e.classList="addTask",e.textContent="+ Add Task",e}static createTaskForm(){const e=document.createElement("div");e.classList="addTaskForm",e.innerHTML='\n    <form action="">\n      <div>\n        <label for="date">Date:</label>\n        <input type="date" name="taskDate" id="taskDate" />\n        <label for="Task">Task:</label>\n        <input type="text" name="taskText" id="taskText" />\n      </div>\n      <div class="taskFormButtons">\n        <button id="formSubmit">\n          <span class="material-symbols-outlined">done</span>Submit\n        </button>\n        <button id="formCancel">\n          <span class="material-symbols-outlined">cancel</span>Cancel\n        </button>\n      </div>\n    </form>\n  ';const t=e.querySelector("#formSubmit"),r=e.querySelector("#formCancel");return t.addEventListener("click",(e=>{e.preventDefault()})),r.addEventListener("click",(e=>{e.preventDefault()})),e}}class f{static loadPage(){this.addProjectListener(),this.projectListener(),this.addTaskListener(),this.addCurrentProjects(),this.differentProjectSelected("main")}static currentProjectOBJ=p.getAProject("main");static createHeader(){const e=document.createElement("div");return e.classList="header",e}static createFooter(){const e=document.createElement("div");return e.classList="footer",e}static addProjectFormBTNS(){const e=document.querySelector("#formSubmit"),t=document.querySelector("#formCancel"),r=document.querySelector("#projectName"),n=document.querySelector("#addProjectForm");r.focus(),e.addEventListener("click",(e=>{if(e.preventDefault(),""!==r.value&&null==p.getAProject(r.value)){r.textContent="",n.replaceWith(l.returnAddProjectBTN()),this.addProjectListener();const e=document.querySelector("div#projectAdder"),t=l.returnProjectItem(r.value);e.before(t),console.log(t),p.addProject(r.value),t.addEventListener("click",(()=>{this.differentProjectSelected(r.value)}))}})),t.addEventListener("click",(e=>{e.preventDefault(),console.log("test"),n.replaceWith(l.returnAddProjectBTN()),this.addProjectListener()}))}static addCurrentProjects(){const e=p.getProjectsNotMain();console.log(e);const t=document.querySelector("div#projectAdder");e.forEach((e=>{const r=l.returnProjectItem(e.getName());t.before(r),r.addEventListener("click",(()=>{this.differentProjectSelected(e.getName())}))}))}static projectListener(){const e=document.querySelector(".primary > div:nth-child(1)"),t=document.querySelector(".primary > div:nth-child(2)"),r=document.querySelector(".primary > div:nth-child(3)");e.addEventListener("click",(()=>{console.log(p.getAProject("main")),this.differentProjectSelected("main")})),t.addEventListener("click",(()=>{this.updateMainDivProjectByDate("today")})),r.addEventListener("click",(()=>{this.updateMainDivProjectByDate("this week")}))}static addProjectListener(){const e=document.querySelector("#projectAdder");e.addEventListener("click",(()=>{e.replaceWith(l.loadAddProject()),this.addProjectFormBTNS()}))}static taskListener(e){const t=e.querySelector(".delete"),r=e.querySelector(".edit"),n=e.querySelector("#finishedTask"),o=e.querySelector(".noteText").textContent;t.addEventListener("click",(()=>{e.remove(),this.currentProjectOBJ.removeTask(o)})),r.addEventListener("click",(()=>{const t=e,r=e.querySelector(".noteText").textContent,n=e.querySelector('input[type="date"]').value,o=h.createTaskForm();console.log("current Text",r),console.log("current Date",n),o.querySelector("#taskText").value=r,o.querySelector("#taskDate").value=n,t.replaceWith(o),this.editTaskListener(o,t)})),n.addEventListener("click",(()=>{e.classList.toggle("checked"),this.currentProjectOBJ.getTask(o).toggleDone()}))}static logicUpdateATask(e,t,r){const n=e.querySelector(".noteText").textContent,o=this.currentProjectOBJ.getTask(n);o.setName(t),o.setDate(r)}static editTaskListener(e,t){const r=e.querySelector("#formSubmit"),n=e.querySelector("#formCancel"),o=e.querySelector("#taskDate"),a=e.querySelector("#taskText");r.addEventListener("click",(r=>{if(console.log("zzzz"),r.preventDefault(),""!==o.value&&""!==o.value){const r=o.value,n=a.value;this.logicUpdateATask(t,n,r);const s=h.createTask(r,n,t.dataset.project);e.replaceWith(s),this.taskListener(s),this.currentProjectOBJ.getTask()}})),console.log(r),n.addEventListener("click",(r=>{r.preventDefault(),e.replaceWith(t),this.taskListener(t)}))}static differentProjectSelected(e){if(document.querySelector(".addTaskForm")){console.log("exists");const e=document.querySelector(".addTaskForm");console.log(e),e.querySelector("#formCancel").click()}console.log(p.getAProject(e)),this.currentProjectOBJ=p.getAProject(e),this.updateMainDivProject(e)}static updateMainDivProject(e){null==document.querySelector(".addTask")&&document.querySelector(".main").append(h.createAddTask()),document.querySelector(".main").dataset.currentProject=e,console.log(this.currentProjectOBJ.getTasks()),document.querySelectorAll("div.task").forEach((e=>{e.remove()})),this.currentProjectOBJ.getTasks().forEach((t=>{console.log("A task",t);const r=document.querySelector(".addTask"),n=h.createTask(t.getDate(),t.getName(),e);!0===t.done&&n.classList.toggle("checked"),this.taskListener(n),r.before(n),this.addTaskListener()}))}static updateMainDivProjectByDate(e){const t=this.logicTasksByDate(e),r=document.querySelector(".main");r.dataset.currentProject="date",console.log(this.currentProjectOBJ.getTasks()),document.querySelectorAll("div.task").forEach((e=>{e.remove()})),console.log("!!!!!",t),t.forEach((e=>{console.log("A task",e);const t=h.createTask(e.getDate(),e.getName(),e.project);!0===e.done&&t.classList.toggle("checked"),this.taskListener(t),r.append(t)})),document.querySelector(".addTask")&&document.querySelector(".addTask").remove()}static logicTasksByDate(t){if("today"===t){const t=[];return p.getProjects().forEach((r=>{r.getTasks().forEach((r=>{console.log("AAAAAAAAAAAAAAA"),function(t){return e(1,arguments),o(t,Date.now())}(new Date(r.getDate()))&&t.push(r)}))})),console.log("Todays tasks",t),t}if("this week"===t){const t=[];return p.getProjects().forEach((r=>{r.getTasks().forEach((r=>{(function(t,r){return e(1,arguments),d(t,Date.now(),r)})(new Date(r.getDate()))&&t.push(r)}))})),console.log("This weeks tasks",t),t}}static addCurrentTasks(){}static formTaskListener(){const e=document.querySelector("#formSubmit"),t=document.querySelector("#formCancel"),r=document.querySelector("#taskDate"),n=document.querySelector(".addTaskForm"),o=document.querySelector(".main").dataset.project,a=document.querySelector("#taskText");e.addEventListener("click",(e=>{if(console.log("zzzz"),e.preventDefault(),""!==r.value&&""!==r.value){const e=r.value,t=a.value;n.replaceWith(h.createAddTask());const s=document.querySelector(".addTask"),c=h.createTask(e,t,o);this.taskListener(c),s.before(c),this.addTaskListener(),this.currentProjectOBJ.addTask(new m(t,e,this.currentProjectOBJ.getName()))}})),console.log(e),t.addEventListener("click",(e=>{e.preventDefault(),n.replaceWith(h.createAddTask()),this.addTaskListener()}))}static addTaskListener(){const e=document.querySelector(".addTask");e.addEventListener("click",(t=>{if(t.preventDefault(),null==document.querySelector(".addTaskForm")){const t=h.createTaskForm();t.querySelector("input#taskDate").focus(),e.replaceWith(t),this.formTaskListener()}}))}}f.loadPage()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
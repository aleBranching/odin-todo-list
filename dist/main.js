(()=>{"use strict";class e{static loadAddProject(){function e(e,t){const r=document.createElement("button"),c=document.createElement("span");c.classList="material-symbols-outlined",c.textContent=e;const n=document.createTextNode(t);return r.appendChild(c),r.appendChild(n),r.id=`form${t}`,r.addEventListener("click",(e=>{e.preventDefault()})),r}const t=document.createElement("form");t.id="addProjectForm";const r=document.createElement("label");r.setAttribute("for","projectName"),r.innerText="Name:";const c=document.createElement("input");c.setAttribute("type","text"),c.setAttribute("name","projectName"),c.setAttribute("id","projectName"),c.required=!0,console.log(c);const n=document.createElement("div");return n.classList="buttons",n.appendChild(e("done","Submit")),n.appendChild(e("cancel","Cancel")),t.appendChild(r),t.appendChild(c),t.appendChild(n),t}static returnProjectItem(e){const t=document.createElement("div");return t.textContent=e,t.id="projectItem",t}static returnAddProjectBTN(){const e=document.createElement("div");return e.textContent="+ Add project",e.id="projectAdder",e}}class t{static createTask(e,t){const r=document.createElement("div");r.classList="task";const c=document.createElement("div");c.classList="taskInfo";const n=document.createElement("input");n.setAttribute("type","checkbox"),n.setAttribute("name","finishedTask"),n.setAttribute("id","finishedTask");const s=document.createElement("input");s.setAttribute("type","date"),s.value=e,s.readOnly=!0;const a=document.createElement("div");a.classList="noteText",a.textContent=t,c.appendChild(n),c.appendChild(s),c.appendChild(a),r.appendChild(c);const o=document.createElement("div");o.classList="functions";const d=document.createElement("span");d.classList="material-symbols-outlined edit",d.textContent="edit";const i=document.createElement("span");return i.textContent="delete",i.classList="material-symbols-outlined delete",o.appendChild(d),o.appendChild(i),r.appendChild(o),r}static createAddTask(){const e=document.createElement("div");return e.classList="addTask",e.textContent="+ Add Task",e}static createTaskForm(){const e=document.createElement("div");e.classList="addTaskForm",e.innerHTML='\n    <form action="">\n      <div>\n        <label for="date">Date:</label>\n        <input type="date" name="taskDate" id="taskDate" />\n        <label for="Task">Task:</label>\n        <input type="text" name="taskText" id="taskText" />\n      </div>\n      <div class="taskFormButtons">\n        <button id="formSubmit">\n          <span class="material-symbols-outlined">done</span>Submit\n        </button>\n        <button id="formCancel">\n          <span class="material-symbols-outlined">cancel</span>Cancel\n        </button>\n      </div>\n    </form>\n  ';const t=e.querySelector("#formSubmit"),r=e.querySelector("#formCancel");return t.addEventListener("click",(e=>{e.preventDefault()})),r.addEventListener("click",(e=>{e.preventDefault()})),e}}class r{constructor(e){this.name=e,this.tasks=[]}setName(e){this.name=e}getName(){return this.name}getTasks(){return this.tasks}getTask(e){return this.tasks.find((t=>t.getName()===e))}removeTask(e){return this.tasks=this.tasks.filter((t=>t.getName()!==e)),this.tasks}addTask(e){return this.tasks.push(e)}}class c{constructor(e,t){this.name=e,this.date=t,this.done=!1}setDate(e){this.date=e}getDate(){return this.date}setName(e){this.name=e}getName(){return this.name}}const n=new class{constructor(){this.projects=[],this.projects.push(new r("main"))}getProjects(){return this.projects}getProjectsNotMain(){return this.projects.filter((e=>"main"!==e.getName()))}getAProject(e){return this.projects.find((t=>t.getName()===e))}addProject(e){return this.projects.push(new r(`${e}`))}};n.addProject("test"),n.getAProject("test").addTask(new c("Do homework","2023-01-19")),n.getAProject("main").addTask(new c("get rizz","2023-01-19")),n.getAProject("main").addTask(new c("Go rock climbing","2024-02-21"));const s=n;class a{static loadPage(){this.addProjectListener(),this.projectListener(),this.addTaskListener(),this.addCurrentProjects(),this.differentProjectSelected("main")}static currentProjectOBJ=s.getAProject("main");static createHeader(){const e=document.createElement("div");return e.classList="header",e}static createFooter(){const e=document.createElement("div");return e.classList="footer",e}static addProjectFormBTNS(){const t=document.querySelector("#formSubmit"),r=document.querySelector("#formCancel"),c=document.querySelector("#projectName"),n=document.querySelector("#addProjectForm");c.focus(),t.addEventListener("click",(t=>{if(t.preventDefault(),""!==c.value&&null==s.getAProject(c.value)){c.textContent="",n.replaceWith(e.returnAddProjectBTN()),this.addProjectListener();const t=document.querySelector("div#projectAdder"),r=e.returnProjectItem(c.value);t.before(r),console.log(r),s.addProject(c.value),r.addEventListener("click",(()=>{this.differentProjectSelected(c.value)}))}})),r.addEventListener("click",(t=>{t.preventDefault(),console.log("test"),n.replaceWith(e.returnAddProjectBTN()),this.addProjectListener()}))}static addCurrentProjects(){const t=s.getProjectsNotMain();console.log(t);const r=document.querySelector("div#projectAdder");t.forEach((t=>{const c=e.returnProjectItem(t.getName());r.before(c),c.addEventListener("click",(()=>{this.differentProjectSelected(t.getName())}))}))}static projectListener(){document.querySelector(".primary > div:nth-child(1)").addEventListener("click",(()=>{console.log(s.getAProject("main")),this.differentProjectSelected("main")}))}static addProjectListener(){const t=document.querySelector("#projectAdder");t.addEventListener("click",(()=>{t.replaceWith(e.loadAddProject()),this.addProjectFormBTNS()}))}static taskListener(e){const r=e.querySelector(".delete"),c=e.querySelector(".edit"),n=e.querySelector("#finishedTask"),s=e.querySelector(".noteText").textContent;r.addEventListener("click",(()=>{e.remove(),this.currentProjectOBJ.removeTask(s)})),c.addEventListener("click",(()=>{const r=e,c=e.querySelector(".noteText").textContent,n=e.querySelector('input[type="date"]').value,s=t.createTaskForm();console.log("current Text",c),console.log("current Date",n),s.querySelector("#taskText").value=c,s.querySelector("#taskDate").value=n,r.replaceWith(s),this.editTaskListener(s,r)})),n.addEventListener("click",(()=>{e.classList.toggle("checked")}))}static logicUpdateATask(e,t,r){const c=e.querySelector(".noteText").textContent,n=this.currentProjectOBJ.getTask(c);n.setName(t),n.setDate(r)}static editTaskListener(e,r){const c=e.querySelector("#formSubmit"),n=e.querySelector("#formCancel"),s=e.querySelector("#taskDate"),a=e.querySelector("#taskText");c.addEventListener("click",(c=>{if(console.log("zzzz"),c.preventDefault(),""!==s.value&&""!==s.value){const c=s.value,n=a.value;this.logicUpdateATask(r,n,c);const o=t.createTask(c,n);e.replaceWith(o),this.taskListener(o),this.currentProjectOBJ.getTask()}})),console.log(c),n.addEventListener("click",(t=>{t.preventDefault(),e.replaceWith(r),this.taskListener(r)}))}static differentProjectSelected(e){if(document.querySelector(".addTaskForm")){console.log("exists");const e=document.querySelector(".addTaskForm");console.log(e),e.querySelector("#formCancel").click()}console.log(s.getAProject(e)),this.currentProjectOBJ=s.getAProject(e),this.updateMainDivProject(e)}static updateMainDivProject(e){document.querySelector(".main").dataset.currentProject=e,console.log(this.currentProjectOBJ.getTasks()),document.querySelectorAll("div.task").forEach((e=>{e.remove()})),this.currentProjectOBJ.getTasks().forEach((e=>{console.log("A task",e);const r=document.querySelector(".addTask"),c=t.createTask(e.getDate(),e.getName());this.taskListener(c),r.before(c),this.addTaskListener()}))}static addCurrentTasks(){}static formTaskListener(){const e=document.querySelector("#formSubmit"),r=document.querySelector("#formCancel"),n=document.querySelector("#taskDate"),s=document.querySelector(".addTaskForm"),a=document.querySelector("#taskText");e.addEventListener("click",(e=>{if(console.log("zzzz"),e.preventDefault(),""!==n.value&&""!==n.value){const e=n.value,r=a.value;s.replaceWith(t.createAddTask());const o=document.querySelector(".addTask"),d=t.createTask(e,r);this.taskListener(d),o.before(d),this.addTaskListener(),this.currentProjectOBJ.addTask(new c(r,e))}})),console.log(e),r.addEventListener("click",(e=>{e.preventDefault(),s.replaceWith(t.createAddTask()),this.addTaskListener()}))}static addTaskListener(){const e=document.querySelector(".addTask");e.addEventListener("click",(r=>{if(r.preventDefault(),null==document.querySelector(".addTaskForm")){const r=t.createTaskForm();r.querySelector("input#taskDate").focus(),e.replaceWith(r),this.formTaskListener()}}))}}a.loadPage()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
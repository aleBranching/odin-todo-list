(()=>{"use strict";class e{static loadAddProject(){function e(e,t){const r=document.createElement("button"),n=document.createElement("span");n.classList="material-symbols-outlined",n.textContent=e;const c=document.createTextNode(t);return r.appendChild(n),r.appendChild(c),r.id=`form${t}`,r.addEventListener("click",(e=>{e.preventDefault()})),r}const t=document.createElement("form");t.id="addProjectForm";const r=document.createElement("label");r.setAttribute("for","projectName"),r.innerText="Name:";const n=document.createElement("input");n.setAttribute("type","text"),n.setAttribute("name","projectName"),n.setAttribute("id","projectName"),n.required=!0,console.log(n);const c=document.createElement("div");return c.classList="buttons",c.appendChild(e("done","Submit")),c.appendChild(e("cancel","Cancel")),t.appendChild(r),t.appendChild(n),t.appendChild(c),t}static returnProjectItem(e){const t=document.createElement("div");return t.textContent=e,t.id="projectItem",t}static returnAddProjectBTN(){const e=document.createElement("div");return e.textContent="+ Add project",e.id="projectAdder",e}}class t{static createTask(e,t){const r=document.createElement("div");r.classList="task";const n=document.createElement("div");n.classList="taskInfo";const c=document.createElement("input");c.setAttribute("type","checkbox"),c.setAttribute("name","finishedTask"),c.setAttribute("id","finishedTask");const s=document.createElement("input");s.setAttribute("type","date"),s.value=e,s.readOnly=!0;const a=document.createElement("div");a.classList="noteText",a.textContent=t,n.appendChild(c),n.appendChild(s),n.appendChild(a),r.appendChild(n);const o=document.createElement("div");o.classList="functions";const d=document.createElement("span");d.classList="material-symbols-outlined edit",d.textContent="edit";const i=document.createElement("span");return i.textContent="delete",i.classList="material-symbols-outlined delete",o.appendChild(d),o.appendChild(i),r.appendChild(o),r}static createAddTask(){const e=document.createElement("div");return e.classList="addTask",e.textContent="+ Add Task",e}static createTaskForm(){const e=document.createElement("div");e.classList="addTaskForm",e.innerHTML='\n    <form action="">\n      <div>\n        <label for="date">Date:</label>\n        <input type="date" name="taskDate" id="taskDate" />\n        <label for="Task">Task:</label>\n        <input type="text" name="taskText" id="taskText" />\n      </div>\n      <div class="taskFormButtons">\n        <button id="formSubmit">\n          <span class="material-symbols-outlined">done</span>Submit\n        </button>\n        <button id="formCancel">\n          <span class="material-symbols-outlined">cancel</span>Cancel\n        </button>\n      </div>\n    </form>\n  ';const t=e.querySelector("#formSubmit"),r=e.querySelector("#formCancel");return t.addEventListener("click",(e=>{e.preventDefault()})),r.addEventListener("click",(e=>{e.preventDefault()})),e}}class r{constructor(e){this.name=e,this.tasks=[]}setName(e){this.name=e}getName(){return this.name}getTasks(){return this.tasks}getTask(e){return this.tasks.find((t=>t.getName()===e))}addTask(e){return this.tasks.push(e)}}const n=new class{constructor(){this.projects=[],this.projects.push(new r("main"))}getProjects(){return this.projects}getAProject(e){return this.projects.find((t=>t.getName()===e))}addProject(e){return this.projects.push(new r(`${e}`))}};class c{constructor(e,t){this.name=e,this.date=t,this.done=!1}setDate(e){this.date=e}getDate(){return this.date}setName(e){this.name=e}getName(){return this.name}}class s{static loadPage(){this.addProjectListener(),this.projectListener(),this.addTaskListener()}static currentProjectOBJ=n.getAProject("main");static createHeader(){const e=document.createElement("div");return e.classList="header",e}static createFooter(){const e=document.createElement("div");return e.classList="footer",e}static addProjectFormBTNS(){const t=document.querySelector("#formSubmit"),r=document.querySelector("#formCancel"),c=document.querySelector("#projectName"),s=document.querySelector("#addProjectForm");c.focus(),t.addEventListener("click",(t=>{if(t.preventDefault(),""!==c.value&&null==n.getAProject(c.value)){c.textContent="",s.replaceWith(e.returnAddProjectBTN()),this.addProjectListener();const t=document.querySelector("div#projectAdder"),r=e.returnProjectItem(c.value);t.before(r),console.log(r),n.addProject(c.value),r.addEventListener("click",(()=>{this.differentProjectSelected(c.value)}))}})),r.addEventListener("click",(t=>{t.preventDefault(),console.log("test"),s.replaceWith(e.returnAddProjectBTN()),this.addProjectListener()}))}static projectListener(){document.querySelector(".primary > div:nth-child(1)").addEventListener("click",(()=>{console.log(n.getAProject("main")),this.differentProjectSelected("main")}))}static addProjectListener(){const t=document.querySelector("#projectAdder");t.addEventListener("click",(()=>{t.replaceWith(e.loadAddProject()),this.addProjectFormBTNS()}))}static taskListener(e){const r=e.querySelector(".delete"),n=e.querySelector(".edit"),c=e.querySelector("#finishedTask");r.addEventListener("click",(()=>{e.remove()})),n.addEventListener("click",(()=>{const r=e,n=e.querySelector(".noteText").textContent,c=e.querySelector('input[type="date"]').value,s=t.createTaskForm();console.log("current Text",n),console.log("current Date",c),s.querySelector("#taskText").value=n,s.querySelector("#taskDate").value=c,r.replaceWith(s),this.editTaskListener(s,r)})),c.addEventListener("click",(()=>{e.classList.toggle("checked")}))}static editTaskListener(e,r){const n=e.querySelector("#formSubmit"),c=e.querySelector("#formCancel"),s=e.querySelector("#taskDate"),a=e.querySelector("#taskText");n.addEventListener("click",(r=>{if(console.log("zzzz"),r.preventDefault(),""!==s.value&&""!==s.value){const r=s.value,n=a.value,c=t.createTask(r,n);e.replaceWith(c),this.taskListener(c)}})),console.log(n),c.addEventListener("click",(t=>{t.preventDefault(),e.replaceWith(r),this.taskListener(r)}))}static differentProjectSelected(e){console.log(n.getAProject(e)),this.currentProjectOBJ=n.getAProject(e),this.updateMainDivProject(e)}static updateMainDivProject(e){document.querySelector(".main").dataset.currentProject=e,console.log(this.currentProjectOBJ.getTasks()),document.querySelectorAll("div.task").forEach((e=>{e.remove()})),this.currentProjectOBJ.getTasks().forEach((e=>{console.log("A task",e);const r=document.querySelector(".addTask"),n=t.createTask(e.getName(),e.getDate());this.taskListener(n),r.before(n),this.addTaskListener()}))}static addCurrentTasks(){}static formTaskListener(){const e=document.querySelector("#formSubmit"),r=document.querySelector("#formCancel"),n=document.querySelector("#taskDate"),s=document.querySelector(".addTaskForm"),a=document.querySelector("#taskText");e.addEventListener("click",(e=>{if(console.log("zzzz"),e.preventDefault(),""!==n.value&&""!==n.value){const e=n.value,r=a.value;s.replaceWith(t.createAddTask());const o=document.querySelector(".addTask"),d=t.createTask(e,r);this.taskListener(d),o.before(d),this.addTaskListener(),this.currentProjectOBJ.addTask(new c(e,r))}})),console.log(e),r.addEventListener("click",(e=>{e.preventDefault(),s.replaceWith(t.createAddTask()),this.addTaskListener()}))}static addTaskListener(){const e=document.querySelector(".addTask");e.addEventListener("click",(r=>{if(r.preventDefault(),null==document.querySelector(".addTaskForm")){const r=t.createTaskForm();r.querySelector("input#taskDate").focus(),e.replaceWith(r),this.formTaskListener()}}))}}s.loadPage()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
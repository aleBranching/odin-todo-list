(()=>{"use strict";class e{static loadAddProject(){function e(e,t){const n=document.createElement("button"),r=document.createElement("span");r.classList="material-symbols-outlined",r.textContent=e;const s=document.createTextNode(t);return n.appendChild(r),n.appendChild(s),n.id=`form${t}`,n.addEventListener("click",(e=>{e.preventDefault()})),n}const t=document.createElement("form");t.id="addProjectForm";const n=document.createElement("label");n.setAttribute("for","projectName"),n.innerText="Name:";const r=document.createElement("input");r.setAttribute("type","text"),r.setAttribute("name","projectName"),r.setAttribute("id","projectName"),r.required=!0,console.log(r);const s=document.createElement("div");return s.classList="buttons",s.appendChild(e("done","Submit")),s.appendChild(e("cancel","Cancel")),t.appendChild(n),t.appendChild(r),t.appendChild(s),t}static returnProjectItem(e){const t=document.createElement("div");return t.textContent=e,t}static returnAddProjectBTN(){const e=document.createElement("div");return e.textContent="+ Add project",e.id="projectAdder",e}}class t{static createTask(e,t){const n=document.createElement("div");n.classList="task";const r=document.createElement("div");r.classList="taskInfo";const s=document.createElement("input");s.setAttribute("type","checkbox"),s.setAttribute("name","finishedTask"),s.setAttribute("id","finishedTask");const c=document.createElement("input");c.setAttribute("type","date"),c.value=e,c.readOnly=!0;const a=document.createElement("div");a.classList="noteText",a.textContent=t,r.appendChild(s),r.appendChild(c),r.appendChild(a),n.appendChild(r);const o=document.createElement("div");o.classList="functions";const d=document.createElement("span");d.classList="material-symbols-outlined edit",d.textContent="edit";const i=document.createElement("span");return i.textContent="delete",i.classList="material-symbols-outlined delete",o.appendChild(d),o.appendChild(i),n.appendChild(o),n}static createAddTask(){const e=document.createElement("div");return e.classList="addTask",e.textContent="+ Add Task",e}static createTaskForm(){const e=document.createElement("div");e.classList="addTaskForm",e.innerHTML='\n    <form action="">\n      <div>\n        <label for="date">Date:</label>\n        <input type="date" name="taskDate" id="taskDate" />\n        <label for="Task">Task:</label>\n        <input type="text" name="taskText" id="taskText" />\n      </div>\n      <div class="taskFormButtons">\n        <button id="formSubmit">\n          <span class="material-symbols-outlined">done</span>Submit\n        </button>\n        <button id="formCancel">\n          <span class="material-symbols-outlined">cancel</span>Cancel\n        </button>\n      </div>\n    </form>\n  ';const t=e.querySelector("#formSubmit"),n=e.querySelector("#formCancel");return t.addEventListener("click",(e=>{e.preventDefault()})),n.addEventListener("click",(e=>{e.preventDefault()})),e}}class n{constructor(e){this.name=e,this.tasks=[]}setName(e){this.name=e}getName(){return this.name}getTasks(){return this.tasks}getTask(e){return this.tasks.find((t=>t.getName()===e))}addTask(e){return this.tasks.push(e)}}const r=new class{constructor(){this.projects=[],this.projects.push(new n("main"))}getProjects(){return this.projects}getAProject(e){return this.projects.find((t=>t.getName()===e))}addProject(e){return this.projects.push(new n(`${e}`))}};console.log(r.projects),console.log(r.getAProject("main")),class{static loadPage(){this.addProjectListener(),this.projectListener(),this.addTaskListener()}static createHeader(){const e=document.createElement("div");return e.classList="header",e}static createFooter(){const e=document.createElement("div");return e.classList="footer",e}static formBTNS(){const t=document.querySelector("#formSubmit"),n=document.querySelector("#formCancel"),r=document.querySelector("#projectName"),s=document.querySelector("#addProjectForm");r.focus(),t.addEventListener("click",(t=>{if(t.preventDefault(),""!==r.value){console.log(r.value),r.textContent="",s.replaceWith(e.returnAddProjectBTN()),this.addProjectListener();const t=document.querySelector("div#projectAdder");console.log(t),t.before(e.returnProjectItem(r.value))}})),n.addEventListener("click",(t=>{t.preventDefault(),console.log("test"),s.replaceWith(e.returnAddProjectBTN()),this.addProjectListener()}))}static projectListener(){document.querySelectorAll("div#projectItem").forEach((e=>{e.addEventListener("click",(()=>{const t=e.textContent;console.log(t)}))}))}static addProjectListener(){const t=document.querySelector("#projectAdder");t.addEventListener("click",(()=>{t.replaceWith(e.loadAddProject()),this.formBTNS()}))}static taskListener(e){const n=e.querySelector(".delete"),r=e.querySelector(".edit"),s=e.querySelector("#finishedTask");n.addEventListener("click",(()=>{e.remove()})),r.addEventListener("click",(()=>{const n=e,r=e.querySelector(".noteText").textContent,s=e.querySelector('input[type="date"]').value,c=t.createTaskForm();console.log("current Text",r),console.log("current Date",s),c.querySelector("#taskText").value=r,c.querySelector("#taskDate").value=s,n.replaceWith(c),this.editTaskListener(c,n)})),s.addEventListener("click",(()=>{e.classList.toggle("checked")}))}static editTaskListener(e,n){const r=e.querySelector("#formSubmit"),s=e.querySelector("#formCancel"),c=e.querySelector("#taskDate"),a=e.querySelector("#taskText");r.addEventListener("click",(n=>{if(console.log("zzzz"),n.preventDefault(),""!==c.value&&""!==c.value){const n=c.value,r=a.value,s=t.createTask(n,r);e.replaceWith(s),this.taskListener(s)}})),console.log(r),s.addEventListener("click",(t=>{t.preventDefault(),e.replaceWith(n),this.taskListener(n)}))}static formTaskListener(){const e=document.querySelector("#formSubmit"),n=document.querySelector("#formCancel"),r=document.querySelector("#taskDate"),s=document.querySelector(".addTaskForm"),c=document.querySelector("#taskText");e.addEventListener("click",(e=>{if(console.log("zzzz"),e.preventDefault(),""!==r.value&&""!==r.value){const e=r.value,n=c.value;s.replaceWith(t.createAddTask());const a=document.querySelector(".addTask"),o=t.createTask(e,n);this.taskListener(o),a.before(o),this.addTaskListener(),this.projectListener()}})),console.log(e),n.addEventListener("click",(e=>{e.preventDefault(),s.replaceWith(t.createAddTask()),this.addTaskListener()}))}static addTaskListener(){const e=document.querySelector(".addTask");e.addEventListener("click",(n=>{if(n.preventDefault(),null==document.querySelector(".addTaskForm")){const n=t.createTaskForm();n.querySelector("input#taskDate").focus(),e.replaceWith(n),this.formTaskListener()}}))}}.loadPage()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
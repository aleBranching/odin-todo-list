(()=>{"use strict";class e{static loadAddProject(){function e(e,t){const r=document.createElement("button"),s=document.createElement("span");s.classList="material-symbols-outlined",s.textContent=e;const c=document.createTextNode(t);return r.appendChild(s),r.appendChild(c),r.id=`form${t}`,r.addEventListener("click",(e=>{e.preventDefault()})),r}const t=document.createElement("form");t.id="addProjectForm";const r=document.createElement("label");r.setAttribute("for","projectName"),r.innerText="Name:";const s=document.createElement("input");s.setAttribute("type","text"),s.setAttribute("name","projectName"),s.setAttribute("id","projectName"),s.required=!0,console.log(s);const c=document.createElement("div");return c.classList="buttons",c.appendChild(e("done","Submit")),c.appendChild(e("cancel","Cancel")),t.appendChild(r),t.appendChild(s),t.appendChild(c),t}static returnProjectItem(e){const t=document.createElement("div");return t.textContent=e,t.id="projectItem",t}static returnAddProjectBTN(){const e=document.createElement("div");return e.textContent="+ Add project",e.id="projectAdder",e}}class t{static createTask(e,t){const r=document.createElement("div");r.classList="task";const s=document.createElement("div");s.classList="taskInfo";const c=document.createElement("input");c.setAttribute("type","checkbox"),c.setAttribute("name","finishedTask"),c.setAttribute("id","finishedTask");const n=document.createElement("input");n.setAttribute("type","date"),n.value=e,n.readOnly=!0;const a=document.createElement("div");a.classList="noteText",a.textContent=t,s.appendChild(c),s.appendChild(n),s.appendChild(a),r.appendChild(s);const o=document.createElement("div");o.classList="functions";const d=document.createElement("span");d.classList="material-symbols-outlined edit",d.textContent="edit";const i=document.createElement("span");return i.textContent="delete",i.classList="material-symbols-outlined delete",o.appendChild(d),o.appendChild(i),r.appendChild(o),r}static createAddTask(){const e=document.createElement("div");return e.classList="addTask",e.textContent="+ Add Task",e}static createTaskForm(){const e=document.createElement("div");e.classList="addTaskForm",e.innerHTML='\n    <form action="">\n      <div>\n        <label for="date">Date:</label>\n        <input type="date" name="taskDate" id="taskDate" />\n        <label for="Task">Task:</label>\n        <input type="text" name="taskText" id="taskText" />\n      </div>\n      <div class="taskFormButtons">\n        <button id="formSubmit">\n          <span class="material-symbols-outlined">done</span>Submit\n        </button>\n        <button id="formCancel">\n          <span class="material-symbols-outlined">cancel</span>Cancel\n        </button>\n      </div>\n    </form>\n  ';const t=e.querySelector("#formSubmit"),r=e.querySelector("#formCancel");return t.addEventListener("click",(e=>{e.preventDefault()})),r.addEventListener("click",(e=>{e.preventDefault()})),e}}class r{constructor(e){this.name=e,this.tasks=[]}setName(e){this.name=e}getName(){return this.name}getTasks(){return this.tasks}getTask(e){return this.tasks.find((t=>t.getName()===e))}removeTask(e){return this.tasks=this.tasks.filter((t=>t.getName()!==e)),this.tasks}addTask(e){return this.tasks.push(e)}}class s{constructor(e,t){this.name=e,this.date=t,this.done=!1}setDate(e){this.date=e}toggleDone(){this.done=!this.done}getDate(){return this.date}setName(e){this.name=e}getName(){return this.name}}const c=new class{constructor(){this.projects=[],this.projects.push(new r("main"))}getProjects(){return this.projects}getProjectsNotMain(){return this.projects.filter((e=>"main"!==e.getName()))}getAProject(e){return this.projects.find((t=>t.getName()===e))}addProject(e){return this.projects.push(new r(`${e}`))}};c.addProject("test"),c.getAProject("test").addTask(new s("Do homework","2023-01-19")),c.getAProject("main").addTask(new s("get rizz","2023-01-19")),c.getAProject("main").addTask(new s("Go rock climbing","2024-02-21"));const n=c;class a{static loadPage(){this.addProjectListener(),this.projectListener(),this.addTaskListener(),this.addCurrentProjects(),this.differentProjectSelected("main")}static currentProjectOBJ=n.getAProject("main");static createHeader(){const e=document.createElement("div");return e.classList="header",e}static createFooter(){const e=document.createElement("div");return e.classList="footer",e}static addProjectFormBTNS(){const t=document.querySelector("#formSubmit"),r=document.querySelector("#formCancel"),s=document.querySelector("#projectName"),c=document.querySelector("#addProjectForm");s.focus(),t.addEventListener("click",(t=>{if(t.preventDefault(),""!==s.value&&null==n.getAProject(s.value)){s.textContent="",c.replaceWith(e.returnAddProjectBTN()),this.addProjectListener();const t=document.querySelector("div#projectAdder"),r=e.returnProjectItem(s.value);t.before(r),console.log(r),n.addProject(s.value),r.addEventListener("click",(()=>{this.differentProjectSelected(s.value)}))}})),r.addEventListener("click",(t=>{t.preventDefault(),console.log("test"),c.replaceWith(e.returnAddProjectBTN()),this.addProjectListener()}))}static addCurrentProjects(){const t=n.getProjectsNotMain();console.log(t);const r=document.querySelector("div#projectAdder");t.forEach((t=>{const s=e.returnProjectItem(t.getName());r.before(s),s.addEventListener("click",(()=>{this.differentProjectSelected(t.getName())}))}))}static projectListener(){document.querySelector(".primary > div:nth-child(1)").addEventListener("click",(()=>{console.log(n.getAProject("main")),this.differentProjectSelected("main")}))}static addProjectListener(){const t=document.querySelector("#projectAdder");t.addEventListener("click",(()=>{t.replaceWith(e.loadAddProject()),this.addProjectFormBTNS()}))}static taskListener(e){const r=e.querySelector(".delete"),s=e.querySelector(".edit"),c=e.querySelector("#finishedTask"),n=e.querySelector(".noteText").textContent;r.addEventListener("click",(()=>{e.remove(),this.currentProjectOBJ.removeTask(n)})),s.addEventListener("click",(()=>{const r=e,s=e.querySelector(".noteText").textContent,c=e.querySelector('input[type="date"]').value,n=t.createTaskForm();console.log("current Text",s),console.log("current Date",c),n.querySelector("#taskText").value=s,n.querySelector("#taskDate").value=c,r.replaceWith(n),this.editTaskListener(n,r)})),c.addEventListener("click",(()=>{e.classList.toggle("checked"),this.currentProjectOBJ.getTask(n).toggleDone()}))}static logicUpdateATask(e,t,r){const s=e.querySelector(".noteText").textContent,c=this.currentProjectOBJ.getTask(s);c.setName(t),c.setDate(r)}static editTaskListener(e,r){const s=e.querySelector("#formSubmit"),c=e.querySelector("#formCancel"),n=e.querySelector("#taskDate"),a=e.querySelector("#taskText");s.addEventListener("click",(s=>{if(console.log("zzzz"),s.preventDefault(),""!==n.value&&""!==n.value){const s=n.value,c=a.value;this.logicUpdateATask(r,c,s);const o=t.createTask(s,c);e.replaceWith(o),this.taskListener(o),this.currentProjectOBJ.getTask()}})),console.log(s),c.addEventListener("click",(t=>{t.preventDefault(),e.replaceWith(r),this.taskListener(r)}))}static differentProjectSelected(e){if(document.querySelector(".addTaskForm")){console.log("exists");const e=document.querySelector(".addTaskForm");console.log(e),e.querySelector("#formCancel").click()}console.log(n.getAProject(e)),this.currentProjectOBJ=n.getAProject(e),this.updateMainDivProject(e)}static updateMainDivProject(e){document.querySelector(".main").dataset.currentProject=e,console.log(this.currentProjectOBJ.getTasks()),document.querySelectorAll("div.task").forEach((e=>{e.remove()})),this.currentProjectOBJ.getTasks().forEach((e=>{console.log("A task",e);const r=document.querySelector(".addTask"),s=t.createTask(e.getDate(),e.getName());!0===e.done&&s.classList.toggle("checked"),this.taskListener(s),r.before(s),this.addTaskListener()}))}static addCurrentTasks(){}static formTaskListener(){const e=document.querySelector("#formSubmit"),r=document.querySelector("#formCancel"),c=document.querySelector("#taskDate"),n=document.querySelector(".addTaskForm"),a=document.querySelector("#taskText");e.addEventListener("click",(e=>{if(console.log("zzzz"),e.preventDefault(),""!==c.value&&""!==c.value){const e=c.value,r=a.value;n.replaceWith(t.createAddTask());const o=document.querySelector(".addTask"),d=t.createTask(e,r);this.taskListener(d),o.before(d),this.addTaskListener(),this.currentProjectOBJ.addTask(new s(r,e))}})),console.log(e),r.addEventListener("click",(e=>{e.preventDefault(),n.replaceWith(t.createAddTask()),this.addTaskListener()}))}static addTaskListener(){const e=document.querySelector(".addTask");e.addEventListener("click",(r=>{if(r.preventDefault(),null==document.querySelector(".addTaskForm")){const r=t.createTaskForm();r.querySelector("input#taskDate").focus(),e.replaceWith(r),this.formTaskListener()}}))}}a.loadPage()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,